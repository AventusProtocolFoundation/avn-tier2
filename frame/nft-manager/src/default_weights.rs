// This file is part of Aventus.
// Copyright (C) Aventus Network Services (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_nft_manager
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 3.0.0
//! DATE: 2022-05-31, STEPS: [50, ], REPEAT: 20, LOW RANGE: [], HIGH RANGE: []
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// ./nft-avn-node
// benchmark
// --chain
// dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// pallet_nft_manager
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --heap-pages=4096
// --template=.maintain/frame-weight-template.hbs
// --output
// nft-bench.rs


#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_nft_manager.
pub trait WeightInfo {
	fn mint_single_nft(r: u32, ) -> Weight;
	fn signed_mint_single_nft(r: u32, ) -> Weight;
	fn list_nft_open_for_sale() -> Weight;
	fn signed_list_nft_open_for_sale() -> Weight;
	fn signed_transfer_fiat_nft() -> Weight;
	fn signed_cancel_list_fiat_nft() -> Weight;
	fn proxy_signed_mint_single_nft(r: u32, ) -> Weight;
	fn proxy_signed_list_nft_open_for_sale() -> Weight;
	fn proxy_signed_transfer_fiat_nft() -> Weight;
	fn proxy_signed_cancel_list_fiat_nft() -> Weight;
	fn proxy_signed_create_batch(r: u32, ) -> Weight;
	fn proxy_signed_mint_batch_nft() -> Weight;
	fn proxy_signed_list_batch_for_sale() -> Weight;
	fn proxy_signed_end_batch_sale() -> Weight;
}

/// Weights for pallet_nft_manager using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
    fn mint_single_nft(r: u32) -> Weight {
        (141_364_000 as Weight)
            // Standard Error: 12_000
            .saturating_add((604_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(5 as Weight))
            .saturating_add(T::DbWeight::get().writes(6 as Weight))
    }
    fn signed_mint_single_nft(r: u32) -> Weight {
        (262_492_000 as Weight)
            // Standard Error: 19_000
            .saturating_add((1_356_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(5 as Weight))
            .saturating_add(T::DbWeight::get().writes(6 as Weight))
    }
    fn list_nft_open_for_sale() -> Weight {
        (81_201_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
            .saturating_add(T::DbWeight::get().writes(2 as Weight))
    }
    fn signed_list_nft_open_for_sale() -> Weight {
        (216_973_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
            .saturating_add(T::DbWeight::get().writes(2 as Weight))
    }
    fn signed_transfer_fiat_nft() -> Weight {
        (285_044_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(4 as Weight))
            .saturating_add(T::DbWeight::get().writes(4 as Weight))
    }
    fn signed_cancel_list_fiat_nft() -> Weight {
        (251_653_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
            .saturating_add(T::DbWeight::get().writes(2 as Weight))
    }
    fn proxy_signed_mint_single_nft(r: u32) -> Weight {
        (295_156_000 as Weight)
            // Standard Error: 21_000
            .saturating_add((1_969_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(5 as Weight))
            .saturating_add(T::DbWeight::get().writes(6 as Weight))
    }
    fn proxy_signed_list_nft_open_for_sale() -> Weight {
        (255_033_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
            .saturating_add(T::DbWeight::get().writes(2 as Weight))
    }
    fn proxy_signed_transfer_fiat_nft() -> Weight {
        (316_504_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(4 as Weight))
            .saturating_add(T::DbWeight::get().writes(4 as Weight))
    }
    fn proxy_signed_cancel_list_fiat_nft() -> Weight {
        (274_463_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
            .saturating_add(T::DbWeight::get().writes(2 as Weight))
    }
    fn proxy_signed_create_batch(r: u32, ) -> Weight {
        (282_965_000 as Weight)
            // Standard Error: 622_000
            .saturating_add((2_093_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(4 as Weight))
            .saturating_add(T::DbWeight::get().writes(5 as Weight))
    }
    fn proxy_signed_mint_batch_nft() -> Weight {
        (419_663_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(7 as Weight))
            .saturating_add(T::DbWeight::get().writes(4 as Weight))
    }
    fn proxy_signed_list_batch_for_sale() -> Weight {
        (300_152_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(5 as Weight))
            .saturating_add(T::DbWeight::get().writes(2 as Weight))
    }
    fn proxy_signed_end_batch_sale() -> Weight {
        (331_733_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(4 as Weight))
            .saturating_add(T::DbWeight::get().writes(2 as Weight))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn mint_single_nft(r: u32) -> Weight {
        (141_364_000 as Weight)
            // Standard Error: 12_000
            .saturating_add((604_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(5 as Weight))
            .saturating_add(RocksDbWeight::get().writes(6 as Weight))
    }
    fn signed_mint_single_nft(r: u32) -> Weight {
        (262_492_000 as Weight)
            // Standard Error: 19_000
            .saturating_add((1_356_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(5 as Weight))
            .saturating_add(RocksDbWeight::get().writes(6 as Weight))
    }
    fn list_nft_open_for_sale() -> Weight {
        (81_201_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(2 as Weight))
            .saturating_add(RocksDbWeight::get().writes(2 as Weight))
    }
    fn signed_list_nft_open_for_sale() -> Weight {
        (216_973_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(2 as Weight))
            .saturating_add(RocksDbWeight::get().writes(2 as Weight))
    }
    fn signed_transfer_fiat_nft() -> Weight {
        (285_044_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(4 as Weight))
            .saturating_add(RocksDbWeight::get().writes(4 as Weight))
    }
    fn signed_cancel_list_fiat_nft() -> Weight {
        (251_653_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(2 as Weight))
            .saturating_add(RocksDbWeight::get().writes(2 as Weight))
    }
    fn proxy_signed_mint_single_nft(r: u32) -> Weight {
        (295_156_000 as Weight)
            // Standard Error: 21_000
            .saturating_add((1_969_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(5 as Weight))
            .saturating_add(RocksDbWeight::get().writes(6 as Weight))
    }
    fn proxy_signed_list_nft_open_for_sale() -> Weight {
        (255_033_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(2 as Weight))
            .saturating_add(RocksDbWeight::get().writes(2 as Weight))
    }
    fn proxy_signed_transfer_fiat_nft() -> Weight {
        (316_504_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(4 as Weight))
            .saturating_add(RocksDbWeight::get().writes(4 as Weight))
    }
    fn proxy_signed_cancel_list_fiat_nft() -> Weight {
        (274_463_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(2 as Weight))
            .saturating_add(RocksDbWeight::get().writes(2 as Weight))
    }
    fn proxy_signed_create_batch(r: u32, ) -> Weight {
        (282_965_000 as Weight)
            // Standard Error: 622_000
            .saturating_add((2_093_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(4 as Weight))
            .saturating_add(RocksDbWeight::get().writes(5 as Weight))
    }
    fn proxy_signed_mint_batch_nft() -> Weight {
        (419_663_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(7 as Weight))
            .saturating_add(RocksDbWeight::get().writes(4 as Weight))
    }
    fn proxy_signed_list_batch_for_sale() -> Weight {
        (300_152_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(5 as Weight))
            .saturating_add(RocksDbWeight::get().writes(2 as Weight))
    }
    fn proxy_signed_end_batch_sale() -> Weight {
        (331_733_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(4 as Weight))
            .saturating_add(RocksDbWeight::get().writes(2 as Weight))
    }
}
