#!/bin/bash
# TODO [TYPE: business logic][PRI: medium] refactor this script to use rpc calls to the node to set the keys rather than generating them

set -e

usage() {
  echo -e "\n\
    Script usage: \n\
      This script generates a pair of keystore files into the node keystore, one file named with 6772616e as prefix, which is \n\
      gran in hex, followed by ed_puk_key without the '0x' prefix. A second file is created with 62616265 as prefix, which is \n\
      babe in hex, followed by stash_sr_puk_key without the '0x' prefix. Both files take the secret phrase with "" as their contents.\n\
    Run as \n\
      ./generate-keystores.sh [options] \n\
    Options: \n\
      -b, --base-path <PATH>      Specify custom base path \n\
      -k, --key-file  <KEY_FILE>  A key file or a directory containing multiple key files generated by using
                                  generate-key.sh script \n\
      -n, --node-name <NAME>      Specify custom node name \n\
      --staging                   Generate a staging chain-spec \n\
      --ethereum-keys-file <file> The etthereum account to be used \n\
      -h, --help                  Displays usage information \n\
  \n"
  exit
}

# $1 is key file name
# $2 is node name
createKeystore() {
  key_data=`cat $1`

  mkdir -p $AVN_BASE_PATH/$2/chains/${chain_dir}/keystore/

  gran_secret_phrase=`echo $key_data | jq '.gran_secret_phrase'`
  gran_ed_puk_key=`echo $key_data | jq '.gran_ed_puk_key'`
  # 6772616e is gran in hex + gran_ed_puk_key with "" and 0x omitted
  echo ${gran_secret_phrase} > $AVN_BASE_PATH/$2/chains/${chain_dir}/keystore/6772616e${gran_ed_puk_key:3:-1}

  babe_secret_phrase=`echo $key_data | jq '.babe_secret_phrase'`
  babe_sr_puk_key=`echo $key_data | jq '.babe_sr_puk_key'`
  # 62616265 is babe in hex + babe_sr_puk_key with "" and 0x omitted
  echo ${babe_secret_phrase} > $AVN_BASE_PATH/$2/chains/${chain_dir}/keystore/62616265${babe_sr_puk_key:3:-1}

  avn_secret_phrase=`echo $key_data | jq '.avn_secret_phrase'`
  avn_sr_puk_key=`echo $key_data | jq '.avn_sr_puk_key'`
  # 61766e6b is avnk in hex + avn_sr_puk_key with "" and 0x omitted
  echo ${avn_secret_phrase} > $AVN_BASE_PATH/$2/chains/${chain_dir}/keystore/61766e6b${avn_sr_puk_key:3:-1}

  imonline_secret_phrase=`echo $key_data | jq '.imonline_secret_phrase'`
  imonline_sr_puk_key=`echo $key_data | jq '.imonline_sr_puk_key'`
  # 696d6f6e is imon in hex + imonline_sr_puk_key with "" and 0x omitted
  echo ${imonline_secret_phrase} > $AVN_BASE_PATH/$2/chains/${chain_dir}/keystore/696d6f6e${imonline_sr_puk_key:3:-1}

  authdisc_secret_phrase=`echo $key_data | jq '.authdisc_secret_phrase'`
  authdisc_sr_puk_key=`echo $key_data | jq '.authdisc_sr_puk_key'`
  # 61756469 is audi in hex + authdisc_sr_puk_key with "" and 0x omitted
  echo ${authdisc_secret_phrase} > $AVN_BASE_PATH/$2/chains/${chain_dir}/keystore/61756469${authdisc_sr_puk_key:3:-1}

  # 6574686b is ethk in hex + public address with 0x omitted
  # Convert to lowercase & ommit 0x
  eth_public_address=${eth_public_address,,}
  eth_public_address=${eth_public_address:2}
  echo \"${eth_private_key}\" > $AVN_BASE_PATH/$2/chains/${chain_dir}/keystore/6574686b${eth_public_address}

  echo "Created keystore files in folder $AVN_BASE_PATH/$2/chains/${chain_dir}/keystore/ for node $2."
}

chain_dir="local_testnet"

while [[ "$#" -gt 0 ]]; do case $1 in
  -b|--base-path) AVN_BASE_PATH="$2"; shift;;
  -k|--key-file) AVN_KEY_FILES="$2"; shift;;
  -n|--node-name) AVN_NODE_NAME="$2"; shift;;
  --staging) chain_dir="avn_testnet";;
  --ethereum-key) eth_private_key="$2"; eth_public_address="$3"; shift; shift;;
  --ethereum-keys-file) ethereum_keys_file=$(readlink -f $2 || realpath $2); shift;;
  -h|--help) usage;;
  *) echo "Unknown parameter passed: $1"; usage; exit 1;;
esac; shift; done

AVN_BASE_PATH=${AVN_BASE_PATH:-./node-data}

# TODO [TYPE: business logic][PRI: low]: trim tail '/' in $AVN_KEY_FILES if there is any
count=0
if [ -d "$AVN_KEY_FILES" ]; then

  eth_account_count=($(cat ${ethereum_keys_file} | jq '.keys | length'))

  for ((i=0;i<${eth_account_count};i++)); do
    address=($(cat ${ethereum_keys_file} | jq '.keys['${i}'].address'))
    pri=($(cat ${ethereum_keys_file} | jq '.keys['${i}'].privateKey'))
    eth_pub_address+=(${address:1:-1})
    eth_pri_key+=(${pri:3:-1})
  done

  for keyFile in $AVN_KEY_FILES/*.json
  do
    eth_public_address=${eth_pub_address[$count]}
    eth_private_key=${eth_pri_key[${count}]}
    createKeystore $keyFile $AVN_NODE_NAME$((count++))
  done
else
  createKeystore $AVN_KEY_FILES $AVN_NODE_NAME
fi
