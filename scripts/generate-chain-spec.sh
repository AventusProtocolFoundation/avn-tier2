#!/bin/bash
# TODO [TYPE: business logic][PRI: medium] refactor this script to use rpc calls to the node to set the keys rather than generating them
set -e

usage() {
  echo -e "\n\
    Script usage: \n\
      This script generates a chain specification file and a chain specification raw file containing account information \n\
      specified in the key files. \n\
    Run as \n\
      ./generate-chain-spec.sh [options] \n\
    Options: \n\
      -c, --chain-name <CHAIN_NAME>     Name of the blockchain, this name will be used in the chain spec file and chain spec \n\
                                        raw file names \n\
      -b, --binary <path>               Path to avn-node binary, default value is target/release/avn-node \n\
      -o, --output                      Output folder \n\
      -k, --key-files <KEY_FILES>       Either a key file name or a directory containing key files generated by using \n\
                                        generate-key.sh script \n\
      -e, --eth-keys-file <KEYS_FILE>   Key file containing Ethereum key pairs in json format \n\
      --staging                         Generate a staging chain-spec \n\
      --lift-contract                   Ethereum contract used by the avn-tier2 for lift operations \n\
      --publish-root-contract           Ethereum contract used by the avn-tier2 for publish-root operations \n\
      --validators-contract             Ethereum contract used by the avn-tier2 for validators operations \n\
      --quorum-factor                   If specified, overwrites the factor of validators needed for a succesful challenge (optional)\n\
      --event-challenge-period          If specified, overwrites the period (in milliseconds) where an event cannot be processed (optional)\n\
      --bootnode                        Specify a bootnode to be added in the spec \n\
      --sudo                            Specify a sudo account \n\
      --default-sudo                    Use the first account as sudo \n\
      --ethereum-events                 Ethereum events file with events that we want to inject to the chain-spec generation \n\
      --overwrite-initial-funds         Overwrite the initial funds of an account from 0 to 1000 AVT. Should NOT be used in any chain-spec used in production \n\
      --avt-contract                    Specify the avt contract address (optional) \n\
      -h, --help                        Displays usage information \n\
  \n"
  exit
}

set_initial_balances() {
  for ((i=0;i<${#ACCOUNTS_SR_ADDRESSES[@]};i++)); do
    AVN_PALLET_BALANCES+=([${ACCOUNTS_SR_ADDRESSES[$i]}, $AVN_INIT_ACCOUNT_BALANCE])
  done
  AVN_PALLET_BALANCES=$(IFS=,; echo "${AVN_PALLET_BALANCES[*]}")
}

set_session_keys() {
  for ((i=0;i<${#ACCOUNTS_SR_ADDRESSES[@]};i++)); do
    AVN_PALLET_SESSION_KEYS+=([${ACCOUNTS_SR_ADDRESSES[$i]}, \
    ${ACCOUNTS_SR_ADDRESSES[$i]}, \
    { \
      \"grandpa\":${GRAN_ED_ADDRESSES[$i]}, \
      \"babe\":${BABE_SR_ADDRESSES[$i]}, \
      \"im_online\":${IMON_SR_ADDRESSES[$i]}, \
      \"authority_discovery\":${AUDI_SR_ADDRESSES[$i]},
      \"avn\":${AVN_SR_ADDRESSES[$i]} \
    }])
  done

  AVN_PALLET_SESSION_KEYS=$(IFS=,; echo "${AVN_PALLET_SESSION_KEYS[*]}")
}

set_validators() {
  for ((i=0;i<${#ACCOUNTS_SR_ADDRESSES[@]};i++)); do
    AVN_VALIDATORS+=([${ACCOUNTS_SR_ADDRESSES[$i]}, ${ETH_KEYS[$i]}])
  done

  AVN_VALIDATORS=$(IFS=,; echo "${AVN_VALIDATORS[*]}")
}

while [[ "$#" -gt 0 ]]; do case $1 in
  -c|--chain-name) AVN_CHAIN_NAME="$2"; shift;;
  -b|--binary) bin_path=$(readlink -f $2 || realpath $2); shift;;
  -k|--key-files) AVN_KEY_FILES="$2"; shift;;
  -e|--eth-keys-file) ETH_KEYS_FILE="$2"; shift;;
  -o|--output) AVN_OUTPUT_FOLDER="$2"; shift;;
  --bootnode) BOOTNODES="`if [[ -n \"${BOOTNODES+x}\" ]]; then echo "${BOOTNODES}, "; fi` \"$2\""; shift;;
  --overwrite-initial-funds) OVERWRITE_INITIAL_FUNDS=1;;
  --ethereum-events) ETH_EVENTS_FILE="$2"; shift;;
  --staging) STAGING_CHAIN=1;;
  --mainnet) MAIN_NET_CHAIN=1;;
  --lift-contract) AVN_LIFT_CONTRACT="$2"; shift;;
  --publish-root-contract) AVN_PUBLSH_CONTRACT="$2"; shift;;
  --validators-contract) AVN_VALIDATORS_CONTRACT="$2"; shift;;
  --avt-contract) AVT_CONTRACT="$2"; shift;;
  --sudo) AVN_SUDO="$2"; shift;;
  --default-sudo) DEFAULT_SUDO=1;;
  --quorum-factor) AVN_QUORUM_FACTOR="$2"; shift;;
  --event-challenge-period) AVN_EVENT_CHALLENGE_PERIOD="$2"; shift;;
  -h|--help) usage;;
  *) echo "Unknown parameter passed: $1"; usage; exit 1;;
esac; shift; done

if [[ -z "${ETH_KEYS_FILE+x}" ]]; then usage; fi

# Find the root of the repository
AVN_ROOT=$(dirname $(dirname $(readlink -f $0 || realpath $0)))

AVN_OUTPUT_FOLDER=$(readlink -f ${AVN_OUTPUT_FOLDER:-"${AVN_ROOT}/scripts/specs/"})
mkdir -p ${AVN_OUTPUT_FOLDER}
AVN_SPEC_FILE="${AVN_OUTPUT_FOLDER}/${AVN_CHAIN_NAME:-"start-default"}Spec.json"
AVN_SPEC_RAW_FILE="${AVN_OUTPUT_FOLDER}/${AVN_CHAIN_NAME:-"start-default"}SpecRaw.json"

if [[ -z "${OVERWRITE_INITIAL_FUNDS+x}" ]]; then
  AVN_INIT_ACCOUNT_BALANCE=0
else
  echo "*** Warning *** Funding 1000 AVT to all accounts. This spec should not be used in production."
  AVN_INIT_ACCOUNT_BALANCE=1000000000000000000000
fi

ACCOUNTS_SR_ADDRESSES=()
GRAN_ED_ADDRESSES=()
BABE_SR_ADDRESSES=()
AUDI_SR_ADDRESSES=()
IMON_SR_ADDRESSES=()
AVN_SR_ADDRESSES=()

ETH_KEYS=[]

# TODO [TYPE: business logic][PRI: low]: trim tail '/' in $AVN_KEY_FILES if there is any
echo "Loading addresses from key files"
if [ -d "$AVN_KEY_FILES" ]; then
  for kp in $AVN_KEY_FILES/*.json
  do
    ACCOUNTS_SR_ADDRESSES+=($(cat $kp | jq '.account_sr_address'))
    AVN_SR_ADDRESSES+=($(cat $kp | jq '.avn_sr_address'))
    GRAN_ED_ADDRESSES+=($(cat $kp | jq '.gran_ed_address'))
    BABE_SR_ADDRESSES+=($(cat $kp | jq '.babe_sr_address'))
    IMON_SR_ADDRESSES+=($(cat $kp | jq '.imonline_sr_address'))
    AUDI_SR_ADDRESSES+=($(cat $kp | jq '.authdisc_sr_address'))
  done
fi

echo "Loading Ethereum keys"
ETH_KEYS=($(cat $ETH_KEYS_FILE | jq '.keys[].base58EncodedPublicKey'))

if [ -n "${ETH_EVENTS_FILE}" ]; then
  echo "Loading processed events"
  PROCESSED_EVENTS_COUNT=($(cat $ETH_EVENTS_FILE | jq '.processed_events | length'))
  echo "Found $PROCESSED_EVENTS_COUNT processed events"
  for ((i=0;i<${PROCESSED_EVENTS_COUNT};i++)); do
    PROCESSED_EVENT_SIGNATURE=$(cat $ETH_EVENTS_FILE | jq '.processed_events['${i}'].signature')
    PROCESSED_EVENT_TX_HASH=$(cat $ETH_EVENTS_FILE | jq '.processed_events['${i}'].tx_hash')
    INITAL_PROCESSED_EVENTS="`if [[ -n \"${INITAL_PROCESSED_EVENTS+x}\" ]]; then echo "${INITAL_PROCESSED_EVENTS}, "; fi` \
    [{"signature": ${PROCESSED_EVENT_SIGNATURE}, "transaction_hash": ${PROCESSED_EVENT_TX_HASH}}, true]";
  done
  echo "Loading initial lift events"
  INITIAL_LIFTS_COUNT=($(cat $ETH_EVENTS_FILE | jq '.initial_lift_events | length'))
  echo "Found $INITIAL_LIFTS_COUNT processed events"
  for ((i=0;i<${INITIAL_LIFTS_COUNT};i++)); do
    INITIAL_LIFTS_TX_HASH=$(cat $ETH_EVENTS_FILE | jq '.initial_lift_events['${i}'].tx_hash')
    INITIAL_LIFTS="`if [[ -n \"${INITIAL_LIFTS+x}\" ]]; then echo "${INITIAL_LIFTS}, "; fi` $INITIAL_LIFTS_TX_HASH";
  done
fi

echo "Generating chain spec file"
${bin_path:-$AVN_ROOT/target/release/avn-node} build-spec --disable-default-bootnode \
  --chain `if [ ${STAGING_CHAIN:-0} -eq 1 ]; then echo staging; else echo local; fi` > $AVN_SPEC_FILE

AVN_PALLET_STAKING_INVULNERABLES=()
AVN_PALLET_STAKING_STAKERS=()
AVN_PALLET_COLLECTIVE_INSTANCE_MEMBERS=()
AVN_PALLET_ELECTIONS_PHRAGMEN_MEMBERS=()
set_initial_balances
set_session_keys
set_validators


# Load default values of some of the options
if [[ -z "${AVN_QUORUM_FACTOR+x}" ]]; then
  AVN_QUORUM_FACTOR=($(cat $AVN_SPEC_FILE | jq '.genesis.runtime.palletEthereumEvents.quorumFactor'))
fi

if [[ -z "${AVN_EVENT_CHALLENGE_PERIOD+x}" ]]; then
  AVN_EVENT_CHALLENGE_PERIOD=($(cat $AVN_SPEC_FILE | jq '.genesis.runtime.palletEthereumEvents.eventChallengePeriod'))
fi

if [[ -z "${AVT_CONTRACT+x}" ]]; then
  AVT_CONTRACT=($(cat $AVN_SPEC_FILE | jq '.genesis.runtime.palletTokenManager.avtTokenContract'))
  AVT_CONTRACT=${AVT_CONTRACT:1:-1}
fi

if [[ -z "${AVN_LIFT_CONTRACT+x}" ]]; then
  AVN_LIFT_CONTRACT=($(cat $AVN_SPEC_FILE | jq '.genesis.runtime.palletEthereumEvents.liftingContractAddress'))
  AVN_LIFT_CONTRACT=${AVN_LIFT_CONTRACT:1:-1}
fi

if [[ -z "${AVN_VALIDATORS_CONTRACT+x}" ]]; then
  AVN_VALIDATORS_CONTRACT=($(cat $AVN_SPEC_FILE | jq '.genesis.runtime.palletEthereumEvents.validatorManagerContractAddress'))
  AVN_VALIDATORS_CONTRACT=${AVN_VALIDATORS_CONTRACT:1:-1}
fi

if [[ -z "${AVN_PUBLSH_CONTRACT+x}" ]]; then
  AVN_PUBLSH_CONTRACT=($(cat $AVN_SPEC_FILE | jq '.genesis.runtime.palletEthereumTransactions.getPublishRootContract'))
  AVN_PUBLSH_CONTRACT=${AVN_PUBLSH_CONTRACT:1:-1}
fi

if [ ${DEFAULT_SUDO:-0} -eq 1 ]; then
  AVN_SUDO=${ACCOUNTS_SR_ADDRESSES[0]}
fi

if [ ${MAIN_NET_CHAIN:-0} -eq 1 ]; then
  CHAIN_NAME="\"AvN Mainnet\""
  CHAIN_ID="\"avn_mainnet\""
else
  CHAIN_NAME="\"AvN Testnet\""
  CHAIN_ID=($(cat $AVN_SPEC_FILE | jq '.id'))
fi

# Update the chain-spec
mv $AVN_SPEC_FILE $AVN_SPEC_FILE.tmp && < $AVN_SPEC_FILE.tmp \
jq ".telemetryEndpoints=[]
  | .id=${CHAIN_ID}
  | .genesis.runtime.palletIndices.indices=[]
  | .genesis.runtime.palletBalances.balances=[$AVN_PALLET_BALANCES]
  | .genesis.runtime.palletStaking.validatorCount=0
  | .genesis.runtime.palletStaking.minimumValidatorCount=0
  | .genesis.runtime.palletStaking.historyDepth=0
  | .genesis.runtime.palletStaking.invulnerables=[${AVN_PALLET_STAKING_INVULNERABLES[*]}]
  | .genesis.runtime.palletStaking.stakers=[${AVN_PALLET_STAKING_STAKERS[*]}]
  | .genesis.runtime.palletValidatorsManager.validators=[$AVN_VALIDATORS]
  | .genesis.runtime.palletSession.keys=[$AVN_PALLET_SESSION_KEYS]
  | .genesis.runtime.palletCollectiveInstance1.members=[${AVN_PALLET_COLLECTIVE_INSTANCE_MEMBERS[*]}]
  | .genesis.runtime.palletSudo.key=${AVN_SUDO}
  | .genesis.runtime.palletElectionsPhragmen.members=[${AVN_PALLET_ELECTIONS_PHRAGMEN_MEMBERS[*]}]
  | .bootNodes=[${BOOTNODES}]
  | .genesis.runtime.palletEthereumEvents.validatorManagerContractAddress=\"${AVN_VALIDATORS_CONTRACT}\"
  | .genesis.runtime.palletEthereumEvents.liftingContractAddress=\"${AVN_LIFT_CONTRACT}\"
  | .genesis.runtime.palletEthereumEvents.processedEvents=[${INITAL_PROCESSED_EVENTS}]
  | .genesis.runtime.palletEthereumEvents.liftTxHashes=[${INITIAL_LIFTS}]
  | .genesis.runtime.palletEthereumEvents.quorumFactor=${AVN_QUORUM_FACTOR}
  | .genesis.runtime.palletEthereumEvents.eventChallengePeriod=${AVN_EVENT_CHALLENGE_PERIOD}
  | .genesis.runtime.palletEthereumTransactions.getPublishRootContract=\"${AVN_PUBLSH_CONTRACT}\"
  | .genesis.runtime.palletTokenManager.avtTokenContract=\"${AVT_CONTRACT}\"
  | .genesis.runtime.palletSociety.members=[]
  | .genesis.runtime.palletCollectiveInstance2.members=[]
" > $AVN_SPEC_FILE

# This replacement of exponential notation is needed as jq converted normal numbers to scientific notation
# TODO [TYPE: business logic][PRI: medium]: change this to be more dynamic
sed -i -e 's/1e+21/1000000000000000000000/g' $AVN_SPEC_FILE
sed -i -e 's/1e+16/10000000000000000/g' $AVN_SPEC_FILE

rm $AVN_SPEC_FILE.tmp

${bin_path:-$AVN_ROOT/target/release/avn-node} build-spec --chain $AVN_SPEC_FILE --raw --disable-default-bootnode > $AVN_SPEC_RAW_FILE

echo "Generated $AVN_SPEC_FILE and $AVN_SPEC_RAW_FILE"